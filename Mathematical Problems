
Question 1:  Minimum Moves to Equal Arrays Elements

class Solution {
    public int minMoves(int[] nums) {
        
        int sum = 0;
        int min = Integer.MAX_VALUE;
        
        for (int num : nums) {
            sum += num;
            min = Math.min (min, num);
        }
        
        return sum - min * nums.length;
    }
}

Question 2: Add Binary
class Solution {
    public String addBinary(String a, String b) {
        StringBuilder res = new StringBuilder();
        int i = a.length() - 1;
        int j = b.length() - 1;
        int carry = 0;
        while(i >= 0 || j >= 0){
            int sum = carry;
            if(i >= 0) sum += a.charAt(i--) - '0';
            if(j >= 0) sum += b.charAt(j--) - '0';
            carry = sum > 1 ? 1 : 0;
            res.append(sum % 2);
        }
        if(carry != 0) res.append(carry);
        return res.reverse().toString();
    }
}

Question 3: Maximum product of three numbers
class Solution {
    public int maximumProduct(int[] nums) {
        Arrays.sort(nums);
        int len = nums.length;
        
        return Math.max(nums[0]*nums[1]*nums[len-1], nums[len-1] * nums[len-2] * nums[len-3]);
    }
}

Question 4: Excel Sheet Column
public class Solution {
public String convertToTitle(int n ){
StringBuilder result = new StringBuilder();
while(n>0){
n--;
result.insert(0,(char)('A'+n%26));
n/=26;
}
return result.toString();
}}

Question 5: Happy Number 
class Solution {
public boolean isHappy(int n ){
Set<Integer> set = new HashSet<>();
while(n!=1){
if(set.contains(n)) return false;
set.add(n);
int sum =0; 
while(n>0){
int rem = n %10;
sum += (rem*rem);
n/=10;
}
n=sum;
}
return true; 
}
}

Question 6:    Palindrome Number
class Solution {
    public boolean isPalindrome(int x) {
    if(x<0 || (x!=0 && x%10==0))
    return false;
    int res = 0;
       while(x>res){
        res = res*10 + x%10;
        x = x/10;
       }
    return (x==res || x==res/10);
}
  
}
    
Question 7:   Missing Numbe
class Solution {
public int missingNumber(int[] nums){
int sum =0;
int n = nums.length; 
for(int i=0; i<nums.length; i++){
sum += nums[i];
}
return n*(n+1)/2 -sum; 
}}


Question 8: Reverse Integer
class Solution {
    public int reverse(int x) {
        int sol = 0; 
        
        while (x != 0) {
            sol += x % 10;
            int checker = sol;
            
            x /= 10;
            
            if (x != 0) {
                sol *= 10;
                if (sol / 10 != checker) {
                    return 0;
                }
            }
        }
        
        return sol;
    }
}



Question 9: Power of Two
class Solution {
public boolean isPowerOfTwo(int n ) {
long num =1; 
while(num<n){
num=num*2;
}
return num==n;
}
}


Question 10: Max Points on a Line
class Solution {
    public int maxPoints(int[][] points) {
        int n = points.length;
        int out = 0;
        if(n==1)
            return n;
        Map<Double, Integer> map = new HashMap<>(); // count pairs of points having same slops
       for(int i=0;i<n;i++){
           for(int j=i+1;j<n;j++){
               // if(i==j)
               //     continue;
               Double m = null; // null values as key is for vertical lines having slop = 90degree
                if(points[i][1]==points[j][1]){ // straight horizontal line
                    m = 0.0;
                } else 
                if(points[i][0]!=points[j][0]){
                    m = ((points[i][1]-points[j][1])*1.0)/(points[i][0]-points[j][0]);
                }

               
               int val = map.getOrDefault(m,1);
               map.put(m, val+1);
           }
           for(Integer val : map.values()){
               out = Math.max(out, val);
           }
           map = new HashMap<>();
       }
        return out;
    }
}


Question 11: Valid Square
class Solution {
    public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {
        int d1 = -1, d2=-1;
        int[][] points = {p1, p2, p3, p4};
        for(int i=0;i<points.length;i++){
            for(int j=i+1; j<points.length; j++){
                int dis = getDistance(points[i], points[j]);
                if(d1==-1){
                    d1 = dis;
                }else if(d2==-1 && d1!=dis){
                    d2 = dis;
                }else if(d1!=dis && d2!=dis){
                    return false;
                }
            }
        }
        return (d1==2*d2 || d2==2*d1) && d2!=-1;
    }
    
    private int getDistance(int[] p1, int[] p2){
        return ((p1[0]-p2[0])*(p1[0]-p2[0])) + ((p1[1]-p2[1])*(p1[1]-p2[1]));
    }
}


Question 12: The kth factor of n
class Solution {
    public int kthFactor(int n, int k) {
        
        int kth = 0; //counter to count kth factor
        for(int i = 1; i <= n; i++){
            if(n % i ==  0){
                kth++;
                if(kth == k){ //when we reach till kth factor we simply return it
                    return i;
                }
            }
        }
        return -1;
    }
}
