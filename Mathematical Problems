Question 1:  Minimum Moves to Equal Arrays Elements

class Solution {
    public int minMoves(int[] nums) {
        
        int sum = 0;
        int min = Integer.MAX_VALUE;
        
        for (int num : nums) {
            sum += num;
            min = Math.min (min, num);
        }
        
        return sum - min * nums.length;
    }
}

Question 2: Add Binary
class Solution {
    public String addBinary(String a, String b) {
        StringBuilder res = new StringBuilder();
        int i = a.length() - 1;
        int j = b.length() - 1;
        int carry = 0;
        while(i >= 0 || j >= 0){
            int sum = carry;
            if(i >= 0) sum += a.charAt(i--) - '0';
            if(j >= 0) sum += b.charAt(j--) - '0';
            carry = sum > 1 ? 1 : 0;
            res.append(sum % 2);
        }
        if(carry != 0) res.append(carry);
        return res.reverse().toString();
    }
}

Question 3: Maximum product of three numbers
class Solution {
    public int maximumProduct(int[] nums) {
        Arrays.sort(nums);
        int len = nums.length;
        
        return Math.max(nums[0]*nums[1]*nums[len-1], nums[len-1] * nums[len-2] * nums[len-3]);
    }
}

Question 4: Excel Sheet Column
public class Solution {
public String convertToTitle(int n ){
StringBuilder result = new StringBuilder();
while(n>0){
n--;
result.insert(0,(char)('A'+n%26));
n/=26;
}
return result.toString();
}}

Question 5: Happy Number 
class Solution {
public boolean isHappy(int n ){
Set<Integer> set = new HashSet<>();
while(n!=1){
if(set.contains(n)) return false;
set.add(n);
int sum =0; 
while(n>0){
int rem = n %10;
sum += (rem*rem);
n/=10;
}
n=sum;
}
return true; 
}
}
