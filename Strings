QUESTION-1: VALID-PARENTHESES/

JAVA LEETCODE SOLUTION 

public class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for(int i = 0; i < s.length(); i++) {
            char a = s.charAt(i);
            if(a == '(' || a == '[' || a == '{') stack.push(a);
            else if(stack.empty()) return false;
            else if(a == ')' && stack.pop() != '(') return false;
            else if(a == ']' && stack.pop() != '[') return false;
            else if(a == '}' && stack.pop() != '{') return false;
        }
        return stack.empty();
    }
}



QUESTION-2: PRINT ALL THE DUPLICATES IN THE STRING/

JAVA SOLUTION

public class Main {
public static void main(String[] args) {
String sentence = "How many duplicates are there?";
String characters = "";
String duplicates = "";
for(int i =0; i<sentence.length(); i++){
String current = Character.toString(sentence.charAt(i));

if(characters.contains(current)){
if(!duplicates.contains(current)) {
duplicates += current + ", ";
}
}
characters += current; 
}
System.out.println(duplicates);
}
}


QUESTION-3: IMPLEMENT STRSTR

class Solution {
    public int strStr(String haystack, String needle) {
    
  for (int i = 0; ; i++) {
    for (int j = 0; ; j++) {
      if (j == needle.length()) return i;
      if (i + j == haystack.length()) return -1;
      if (needle.charAt(j) != haystack.charAt(i + j)) break;
    }
  }
}    
}

QUESTION-4: Longest Common Prefix

class Solution {
    public String longestCommonPrefix(String[] strs) {
       if(strs == null || strs.length ==0) 
           return "";
        String pre = strs[0];
        int i =1;
        while(i<strs.length){
            while(strs[i].indexOf(pre)!=0)
                pre= pre.substring(0, pre.length()-1);
            i++;
        }
        return pre;
    }
}



QUESTION-5: VALID PALINDROME-II
class Solution {
public boolean validPalindrome(String s) {
return isPalindrome(s,0,s.length()-1, 1);
}
public boolean isPalindrome(String str, int start , int end, int chance){
if(start >=end) return true; 
if(str.charAt(start) == str.charAt(end))
return isPalindrome(str, start+1, end-1, chance);

if(chance ==0) return false; 
return isPalindrome(str, start+1, end , chance-1) || isPalindrome(str, start , end-1, chance-1);
}
}

   
 
QUESTION-6: INTEGER-TO-ROMAN

class Solution {
public String intToRoman(int num) {
  int[] values = {1000,900,500,400,100,90,50,40,10,9,5,4,1};
    String[] romanNumerals ={"M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"}; 
    StringBuilder sb = new StringBuilder();
   for (int i = 0; i < values.length; i++) {
        
        while(num >= values[i]) {
            num -= values[i];
            sb.append(romanNumerals[i]);
        }}
    return sb.toString();  
}
}

QUESTION -7: Generate- parentheses
//USING BACKTRACKING 
class Solution {
   public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<String>();
        backtrack(list, "", 0, 0, n);
        return list;
    }
    public void backtrack(List<String> list, String str, int open, int close, int max){
    
    if(str.length() == max*2){
        list.add(str);
        return;
    }
    
    if(open < max)
        backtrack(list, str+"(", open+1, close, max);
    if(close < open)
        backtrack(list, str+")", open, close+1, max);
}
}
QUESTION-8: Simplify-Path

class Solution {
    public String simplifyPath(String path) {
        String[] dirs= path.split("/");
        Deque<String> stack = new ArrayDeque<>();
        for(String s: dirs){
            if(s.equals("")) continue; 
            if(s.equals(".")) continue; 
            if(s.equals("..")) stack.pollLast();
            else stack.add(s);
        }
        return "/" + String.join("/", stack);
    }
}

QUESTION--9: MINIMUM SLIDING WINDOW
public static String smallestWindow(String s, String p)
   {
       if(s==null || p==null || p.length()==0 || s.length()==0)
       {
           return "-1";
       }
       
       String ans="";
       int anslength=Integer.MAX_VALUE;
       
       HashMap<Character,Integer> small= new HashMap<>();
       
       for(int i=0;i<p.length();i++)
       {
           char ch=p.charAt(i);
           small.put(ch,small.getOrDefault(ch,0)+1);
       }
       
       HashMap<Character,Integer> big= new HashMap<>();
       int DesiredMatchCount=p.length();
       int MatchCount=0;
       
       int i=0;
       int j=0;
       
       while(i<s.length())
       {
           while(i<s.length() && MatchCount<DesiredMatchCount)
           {
               char ch=s.charAt(i);
               big.put(ch,big.getOrDefault(ch,0)+1);
               if(big.getOrDefault(ch,0)<=small.getOrDefault(ch,0))
               {
                   MatchCount++;
               }
               i++;
           }
           
           while(j<i && MatchCount==DesiredMatchCount)
           {
               int minlength=i-j;
               if(minlength<anslength)
               {
                   anslength=minlength;
                   ans=s.substring(j,i);
               }
               
               char ch=s.charAt(j);
               if (big.get(ch)==1)
               {
                   big.remove(ch);
               }
               else
               {
                   big.put(ch,big.get(ch)-1);
               }
               
               if(big.getOrDefault(ch,0)<small.getOrDefault(ch,0))
               {
                   MatchCount--;
               }
               j++;
           }
       }
       if(ans=="")
       {
           return "-1";
       }
       return ans;
       
   }


QUESTION:10- REVERSE WORDS IN A STRING 

class Solution {
   public String reverseWords(String s) {
        Stack<String> st = new Stack<String>();
        for (String a : s.trim().split(" ")) {
            if (!a.isEmpty())
                st.push(a);
        }
        
        StringBuilder sb = new StringBuilder();
        while (!st.isEmpty()) {
            sb.append(st.pop());
            sb.append(" ");            
        }
        
        return sb.toString().trim();
    }
}

QUESTION:-11 GROUP ANAGRAMS

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String,ArrayList<String>> mpp = new HashMap<String,ArrayList<String>>();

        for(String st:strs){
            char[] ch = st.toCharArray();
            Arrays.sort(ch);
            String ss = String.valueOf(ch);
            if(!mpp.containsKey(ss)) mpp.put(ss,new ArrayList<String>());
            mpp.get(ss).add(st);
        }
        return new ArrayList<>(mpp.values());
    }

}

QUESTION:-11 BASIC CALCULATOR II
public class Solution {
public int calculate(String s) {
    int res = 0, pre = 0, curr = 0;
    char sign = '+';
    char[] array = s.trim().toCharArray();
    for(int i=0; i<=array.length; i++){
        if(i!=array.length && Character.isDigit(array[i]))
            curr = curr*10 + array[i]-'0';
        else{
            if(i!=array.length && array[i]==' ') continue;
            if(sign=='+'){
                res += curr;
                pre = curr;
            }
            if(sign=='-'){
                res -= curr;
                pre = -curr;
            }
            if(sign=='*'){
                res = res - pre + pre*curr;
                pre = pre*curr;
            }
            if(sign=='/'){
                res = res - pre + pre/curr;
                pre = pre/curr;
            }
            curr = 0;
            if(i!=array.length) sign = array[i];
        }
    }
    return res;
}
}

QUESTION: -12 VALID NUMBER(HARD) 
class Solution {
    public boolean isNumber(String s) {
        
        if (s == null || s.length () == 0) {
            return false;
        }
        
        boolean eSeen = false;
        boolean numberSeen = false;
        boolean decimalSeen = false;
        
        for (int i = 0; i < s.length (); i++) {
            char c = s.charAt (i);
            if (c >= 48 && c <= 57) {
                numberSeen = true;
            }
            else if (c == '+' || c == '-') {
                if (i == s.length () - 1 || (i != 0 && s.charAt (i - 1) != 'e' && s.charAt (i - 1) != 'E')) {
                    return false;
                }
            }
            else if (c == '.') {
                if (eSeen || decimalSeen) {
                    return false;
                }
                
                decimalSeen = true;
            }
            else if (c == 'e' || c == 'E') {
                if (i == s.length () - 1 || eSeen || !numberSeen) {
                    return false;
                }
                
                eSeen = true;
            }
            else {
                return false;
            }
        }
        
        return numberSeen;
    }
}

QUESTION:13 INTEGER TO ENGLISH WORDS

class Solution {
   private String[] digit = new String[] {"Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"};
private String[] teen = new String[] {"Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
private String[] ten = new String[] {"Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
private String[] thousand = new String[] {"Thousand", "Million", "Billion"};

public String numberToWords(int num) {
	String ans;
	if (num == 0)
		return digit[num];
	
	ans = hundredHelper(num%1000);
	num = num/1000;
	int i = 0;
	while (i < 3 && num > 0) {
		if (num % 1000 > 0)
			ans = hundredHelper(num%1000) + thousand[i] + " " + ans;
		num = num/1000;
		i++;
	}
	
	return ans.trim();
}

public String hundredHelper(int num) {
	String nstr = "";
	if (num >= 100) {
		nstr = digit[num/100] + " Hundred ";
	}
	num = num%100;
	if (num >= 20) {
		if (num % 10 != 0)
			nstr = nstr + ten[num/10 - 2] + " " +  digit[num%10] + " ";
		else
			nstr = nstr + ten[num/10 - 2] + " ";
	} else if (num >= 10) {
		nstr = nstr + teen[num%10] + " ";
	} else if (num > 0){
		nstr = nstr + digit[num] + " ";
	}
	return nstr;
}
}

QUESTION:14 MINIMUM WINDOW SUBSTRING
class Solution {
    public String minWindow(String s, String t) {
        String result = "";
        if(s.length() < t.length())
            return result;
        int minWindow = Integer.MAX_VALUE;
		//We will use two variables 'have' & 'need' to keep a track whether the characters 
		//we need have been encountered.
        int need = t.length();
        int have = 0;
		//Two hashmaps are used to store the character count.
        Map<Character, Integer> sMap = new HashMap();
        Map<Character, Integer> tMap = new HashMap();
        for(int i=0; i<t.length(); i++){
            char ch = t.charAt(i);
            tMap.put(ch, tMap.getOrDefault(ch,0)+1);
        }
        int windowStart = 0;
        for(int windowEnd = 0; windowEnd<s.length(); windowEnd++){
            char ch = s.charAt(windowEnd);
            sMap.put(ch, sMap.getOrDefault(ch,0)+1);
			//if we have encountered a useful character, we will increment have variable.
            if(tMap.containsKey(ch) && sMap.get(ch)<=(tMap.get(ch))){
                have++;
            }
			//if have is equals to the need, means we got a substring in s having all the character of t
            while(have==need){
				//check if its the mimimum substring till now
                if(minWindow > windowEnd-windowStart+1){
                    minWindow = windowEnd-windowStart+1;
                    result = s.substring(windowStart, windowEnd+1);
                }
				//now we will check, can we do better
				//is there a shorter substring
                char charToRemove = s.charAt(windowStart);
                if(sMap.get(charToRemove) == 1){
                    sMap.remove(charToRemove);
                }else{
                sMap.put(charToRemove, sMap.get(charToRemove)-1);
                }
                windowStart++;
				//if we remove a useful char, decrementing have varaible
                if(tMap.containsKey(charToRemove) && sMap.getOrDefault(charToRemove,0)<(tMap.get(charToRemove))){
                    have--;
                }
            }
        }
        return result;
    }
}

QUESTION:15 TEXT JUSTIFICATION 
class Solution {
    private int maxWidth;
    private String[] words;
    
    public List<String> fullJustify(String[] ws, int maxW) {        
        
        List<String> text = new LinkedList<>();        
        maxWidth = maxW;
        words = ws; 
        // Use start/end indexes into words array to avoid making a list of words in current line (for efficiency).
        int start = 0; 
        int end = 1;
        int lineLen = words[start].length();
        
        for (; end < words.length; end++) {
            String word = words[end];
            
            if (lineLen + word.length() + 1 <= maxWidth) { // Word fits in this line. Plus one is for a space.
                lineLen += word.length() + 1; 
            } else { // Word does not fit in this line, space out current line and start a new one.
                text.add(constructLine(start, end, lineLen));
                start = end;
                lineLen = word.length();
            }   
        }
        
        if (end - start > 0) {
            text.add(lineWithoutInterWordPadding(start, end, lineLen));
        }
        
        return text;
    }
    
    private String lineWithoutInterWordPadding(int start, int end, int lineLength) {
        // Don't use stream Collectors.joining(" ") here, even though it is more readable. The below is faster.
        StringBuilder line = new StringBuilder();
        line.append(words[start]);
        for (int i = start + 1; i < end; i++) {
            line.append(" ");
            line.append(words[i]);
        }
        return line.toString() + " ".repeat(maxWidth - lineLength);
    }
    
    private String constructLine(int start, int end, int lineLength) {
        int numSpaces = end - (start + 1);
        
        if (numSpaces == 0) { // Only one word in the line.
            return lineWithoutInterWordPadding(start, end, lineLength);
        }
        
        int padding = maxWidth - lineLength;       // Extra padding needed.
        int spaceNeeded = padding / numSpaces + 1; // Padding between each word (extra + minimum one).
        int leftOverSpaces = padding % numSpaces;  // Extra spaces that don't divide evenly between words.
        
        StringBuilder line = new StringBuilder();
        line.append(words[start]);
        
        for (int i = start + 1; i < end; i++) {
            line.append(" ".repeat(spaceNeeded));
            if (leftOverSpaces-- > 0) {
                line.append(' ');
            }
            line.append(words[i]);
        }
        
        return line.toString();
    }
}

QUESTION 16: DISTINCT SUBSEQUENCES 
class Solution {
   public int numDistinct(String S, String T) {
	int sl = S.length();
	int tl = T.length();
	
	int [][] dp = new int[tl+1][sl+1];

	for(int i=0; i<=sl; ++i){
		dp[0][i] = 1;
	}
	
	for(int t=1; t<=tl; ++t){
		
		for(int s=1; s<=sl; ++s){
			if(T.charAt(t-1) != S.charAt(s-1)){
				dp[t][s] = dp[t][s-1];
			}else{
				dp[t][s] = dp[t][s-1] + dp[t-1][s-1];
			}
		}	
	}
	
	return dp[tl][sl];
}
}


fsdszxz
asa
sasa,.
sda
fadfa
fagad
asasa
