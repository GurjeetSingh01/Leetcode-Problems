QUESTION 1: FIND THE DUPLICATE NUMBER

class Solution {
    public int findDuplicate(int[] nums){
        HashMap<Integer, Integer> map = new HashMap<>();
        int n = nums.length; 
        for(int i =0; i<nums.length; i++){
            if(map.containsKey(nums[i])) 
                return nums[i];
            else{
                map.put(nums[i],1);
            }
        }
        return -1; 
    }
}

QUESTION 2: SORT COLORS

class Solution {
    
public static void sortColors(int[] arr) {
int l=0;
int m=0; 
int h=arr.length-1;
while(m<=h)
{
    if(arr[m]==0){ //element is 0
        swap(arr,l,m);
        l++;
        m++;
    } else if(arr[m]==2){
        swap(arr,m,h);
        h--;
    }
    else m++;
}
  }
  
 private static void swap(int[] array, int i, int j) {
    int temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }
}

QUESTION 3: REMOVE DUPLICATES FROM SORTED ARRAY

class Solution {
    public int removeDuplicates(int[] nums) {
      if(nums.length == 0) return 0;
      int res = 1;
      for(int i = 1; i < nums.length; i++){
        if(nums[i] != nums[i - 1]){
          nums[res] = nums[i];
          res++;
        }
      }
      return res;
    }
}

QUESTION 4: SET MATRIX ZEROES


import java.util.*;
class Solution{
static void setZeroes(int[][] matrix) {
        int col0 = 1, rows = matrix.length, cols = matrix[0].length;

        for (int i = 0; i < rows; i++) {
            if (matrix[i][0] == 0) col0 = 0;
            for (int j = 1; j < cols; j++)
                if (matrix[i][j] == 0)
                    matrix[i][0] = matrix[0][j] = 0;
        }

        for (int i = rows - 1; i >= 0; i--) {
            for (int j = cols - 1; j >= 1; j--)
                if (matrix[i][0] == 0 || matrix[0][j] == 0)
                    matrix[i][j] = 0;
            if (col0 == 0) matrix[i][0] = 0;
        } }
public static void main(String args[]) {
        int arr[][] = {{0, 1, 2, 0}, {3, 4, 5, 2}, {1, 3, 1, 5}};
        setZeroes(arr);
        System.out.println("The Final Matrix is ");
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[0].length; j++) {
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }
}
}

QUESTION 5: MOVE ZEROES 
class Solution {
       
public void moveZeroes(int[] nums) {
    int zero = 0, l = 0, r = nums.length;
    while (l < r) {
        if (nums[l] != 0) {
            int tmp = nums[zero];
            nums[zero++] = nums[l];
            nums[l] = tmp;
        }
        l++;
    }
}}    
    
QUESTION 6: BEST TIME TO BUY AND SELL STOCK I
class Solution {
    public int maxProfit(int[] prices) {
        int lsf = Integer.MAX_VALUE;
        int op = 0;
        int pist = 0;
        
        for(int i = 0; i < prices.length; i++){
            if(prices[i] < lsf){
                lsf = prices[i];
            }
            pist = prices[i] - lsf;
            if(op < pist){
                op = pist;
            }
        }
        return op;
    }
}

QUESTION 7: TWO SUM 
class Solution {
    public int[] twoSum(int[] nums, int target) {
      int num1 , num2; 
      for(int i=0; i<nums.length; i++){
          num1 = nums[i];
          for(int j=i+1; j<nums.length; j++){
              num2 = nums[j];
              if(num1 + num2 == target) return new int[]{i, j};
          }
      }
      return null;
    }
}

QUESTION 8: BEST TIME TO BUY AND SELL STOCK II 
class Solution {
    public int maxProfit(int[] prices) {
        int bd = 0; // buy date
        int sd = 0; // sell date
        int profit = 0; // overall profit after selling
        for(int i = 1; i < prices.length; i++){ // run a loop from 1 because on 0th day we buy the stock and after 1 or on 1 we can sell it. and so on
            if(prices[i] >= prices[i - 1]){ // check if previous selling price is lesser then the current one
                sd++;
            }
            else{ // otherwise, calculate the profit before the drop down
                profit += prices[sd] - prices[bd];
                bd = sd = i; // and move to new buy and sell day
            }
        }
        profit += prices[sd] - prices[bd]; // again compare n check it
        return profit; 
    }
}

QUESTION 9: Subarray Sums Divisible by K
class Solution {
    public int subarraysDivByK(int[] arr, int k) {
        int count=0,sum=0;
		int rem;
        int n=arr.length;
		HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
		map.put(0, 1);//save rem and its freq
		for(int i=0;i<n;i++)
		{
			sum=sum+arr[i];
			rem=sum%k;
			if(rem<0)
			{
				rem+=k;
			}
			if(map.containsKey(rem))
			{
				count=count+map.get(rem);
				map.put(rem, map.get(rem)+1);
			}
			else
			{
				map.put(rem, 1);
			}
		}
		return count;
    }
}

QUESTION 10: FIND ALL DUPLICATES IN AN ARRAY
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> res = new ArrayList<>();
        
        for (int i = 0; i < nums.length; i++) {
            
            int idx = Math.abs(nums[i]) - 1; // Get the mapped index for nums[i], using Math.abs only once
            
            if (nums[idx] < 0) // Check if nums[i] has been seen before, if true then add to the output list
                res.add(idx + 1); // Need to add +1 as our range is 1-based
            
            nums[idx] *= -1; // Unconditionally flip the sign, if it's positive, we want to mark it as negative. But if it's negative, we just recover previous value so that at the end our array is not modified
        }
        
        return res;
    }
}

QUESTIION 11: CONTAINER WITH MOST WATER
class Solution {
public int maxArea(int[] height) {
int max_area=0;
int a_pointer=0;
int b_pointer = height.length-1;
 while(a_pointer<b_pointer){
if(height[a_pointer] < height[b_pointer]){
max_area = Math.max(max_area, height[a_pointer] * (b_pointer-a_pointer));
a_pointer +=1;
}
else 
{
max_area = Math.max(max_area, height[b_pointer] * (b_pointer-a_pointer));
b_pointer -=1;
}
}
return max_area;
}
}

QUESTION : 11 3SUM

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
        int target = 0;
        ArrayList<List<Integer>> sol = new ArrayList<List<Integer>>();
        if(nums == null || nums.length == 0){
            return sol;
        }
        Arrays.sort(nums);
        for(int i = 0 ; i<=nums.length-1 ;i++){
           
                int remaining  = target - nums[i] ;
                int front = i+1;
                int back = nums.length-1;
            
                while(front < back){
                    int twoSum = nums[front] + nums[back];
                    if(twoSum < remaining)front++;
                    else if(twoSum >remaining)back--;
                    else{
                        List<Integer> triplet = new ArrayList<>();
                        triplet.add(nums[i]);
                        triplet.add(nums[front]);
                        triplet.add(nums[back]);
                        sol.add(triplet);

                        while(front < back && nums[front] == triplet.get(1))front++;
                        while(front < back && nums[back] == triplet.get(2))back--;  
                    }
                }
            while( i+1<=nums.length-1 && nums[i] == nums[i+1]) i++;
        }
        return sol;
    }
}

QUESTION 12: 4SUM

 public class Solution {
        int len = 0;
        public List<List<Integer>> fourSum(int[] nums, int target) {
            len = nums.length;
            Arrays.sort(nums);
            return kSum(nums, target, 4, 0);
        }
       private ArrayList<List<Integer>> kSum(int[] nums, int target, int k, int index) {
            ArrayList<List<Integer>> res = new ArrayList<List<Integer>>();
            if(index >= len) {
                return res;
            }
            if(k == 2) {
            	int i = index, j = len - 1;
            	while(i < j) {
                    //find a pair
            	    if(target - nums[i] == nums[j]) {
            	    	List<Integer> temp = new ArrayList<>();
                    	temp.add(nums[i]);
                    	temp.add(target-nums[i]);
                        res.add(temp);
                        //skip duplication
                        while(i<j && nums[i]==nums[i+1]) i++;
                        while(i<j && nums[j-1]==nums[j]) j--;
                        i++;
                        j--;
                    //move left bound
            	    } else if (target - nums[i] > nums[j]) {
            	        i++;
                    //move right bound
            	    } else {
            	        j--;
            	    }
            	}
            } else{
                for (int i = index; i < len - k + 1; i++) {
                    //use current number to reduce ksum into k-1sum
                    ArrayList<List<Integer>> temp = kSum(nums, target - nums[i], k-1, i+1);
                    if(temp != null){
                        //add previous results
                        for (List<Integer> t : temp) {
                            t.add(0, nums[i]);
                        }
                        res.addAll(temp);
                    }
                    while (i < len-1 && nums[i] == nums[i+1]) {
                        //skip duplicated numbers
                        i++;
                    }
                }
            }
            return res;
        }
    }


QUESTION 13: MAXIMUM POINTS YOU CAN OBTAIN FROM CARDS
class Solution {
   public int maxScore(int[] cp, int k) {
    int n = cp.length;
    int leftsum = 0;
    for (int i = 0; i < k; i++) {
        leftsum += cp[i];
    }
    int max = leftsum;
    int rightsum = 0;

    for (int i = 0; i < k; i++) {
        leftsum  -= cp[k - 1 - i];
        rightsum += cp[n - 1 - i];
        max = Math.max(max, leftsum + rightsum);
    }

    return max;
}}


QUESTION 14: SUBARRAY SUM EQUALS K

class Solution {
    public int subarraySum(int[] nums, int k) {
        int n = nums.length;
        int[] psum = new int[n+1];
        psum[0] = 0;
        for(int i=1; i<=n; i++){
            psum[i] = psum[i-1] + nums[i-1];
        }
        int count = 0;
        for(int i=1; i<=n; i++){
            for(int j=0; j<i; j++){
                if(psum[i]-psum[j] == k)
                    count++;
            }
        }
        return count;
    }
}
QUESTION 15: SPIRAL MATRIX

public class Solution {
public List<Integer> spiralOrder(int[][] matrix) {
    List<Integer> list = new ArrayList<Integer>();
    if(matrix == null || matrix.length == 0 || matrix[0].length == 0) return list;
    int row = matrix.length;
    int col = matrix[0].length;
    int left = 0, right = col-1;
    int top = 0, bottom = row-1;
    while(true){
        for(int i = left; i<=right; i++){
            list.add(matrix[top][i]);
        }
        top++;
        if(top > bottom) break;
        for(int i = top; i<=bottom; i++){
            list.add(matrix[i][right]);
        }
        right--;
        if(right < left) break;
        for(int i = right; i>=left; i--){
            list.add(matrix[bottom][i]);
        }
        bottom--;
        if(bottom < top) break;
        for(int i = bottom; i>=top; i--){
            list.add(matrix[i][left]);
        }
        left++;
        if(left > right) break;
    }
    return list;
}

}

QUESTION 16: WORD SEARCH
Using DFS + backtracking, before going deep in the grid check whether the current character in the grid matches with the character at index of word.
class Solution {
    
    public boolean isValid(char[][] board,int i,int j)
    {
        if(i<0 || j<0 || i>=board.length || j>=board[0].length || board[i][j] == '.')
            return false;
        
        return true;
    }
    
    public boolean helper(char[][] board, String word,int i,int j,int index)
    {
        if(index == word.length())
            return true;
        
        if(isValid(board,i,j) && word.charAt(index) == board[i][j])
        {
            char c = board[i][j];
            board[i][j] = '.'; //visited

            if(helper(board,word,i+1,j,index+1) || helper(board,word,i-1,j,index+1) || helper(board,word,i,j+1,index+1) || helper(board,word,i,j-1,index+1))
                return true;

            board[i][j] = c; //unvisited
            //return result;
        }
        
        return false;
        
    }
    public boolean exist(char[][] board, String word) {
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[i].length;j++)
            {
                if(board[i][j] == word.charAt(0) && helper(board,word,i,j,0))
                    return true;
            }
        }
        return false;
    }
}

QUESTION 17: JUMP GAME
public class Solution {
    public boolean canJump(int[] nums) {
       if(nums.length < 2) return true;
       
       for(int curr = nums.length-2; curr>=0;curr--){
           if(nums[curr] == 0){
               int neededJumps = 1;
               while(neededJumps > nums[curr]){
                   neededJumps++;
                   curr--;
                   if(curr < 0) return false;
               }
           }
       }
       return true;
    }
}

QUESTION 18: MERGE SORTED ARRAY
class Solution {
   public void merge(int[] nums1, int m, int[] nums2, int n) {
    int tail1 = m - 1, tail2 = n - 1, finished = m + n - 1;
    while (tail1 >= 0 && tail2 >= 0) {
        nums1[finished--] = (nums1[tail1] > nums2[tail2]) ? 
                             nums1[tail1--] : nums2[tail2--];
    }

    while (tail2 >= 0) { //only need to combine with remaining nums2, if any
        nums1[finished--] = nums2[tail2--];
    }
}
}

QUESTION 19: MAJORITY ELEMENT

class Solution {
    public int majorityElement(int[] nums) {
     Arrays.sort(nums);
     return nums[nums.length/2];
}
}

QUESTION 19: REVERSE PAIRS
class Solution {
    public int reversePairs(int[] nums) {
        int[] temp = new int[nums.length];
        return mergeSort(nums,0,nums.length-1,temp);
    }
    
    public int mergeSort(int[] nums, int low, int high, int[] temp) {
        int count = 0;
        if(low<high)
        {
            int mid = (low+high)/2;
            count += mergeSort(nums,low,mid,temp);
            count += mergeSort(nums,mid+1,high,temp);
            count += merge(nums,low,mid+1,high,temp);
        }
        return count;
    }
    
    public int merge(int[] nums, int low, int mid, int high, int[] temp) {
        int count = 0, x = mid;
        for(int i=low; i<mid; i++)
        {
            while((x<=high) && (nums[i]>2*(long)nums[x]))
                x++;
            
            count += x-mid;
        }
        
        int i = low, j = mid, k = low;
        while((i<=mid-1) && (j<=high))
        {
            if(nums[i]<=nums[j])
                temp[k++] = nums[i++];
            else
                temp[k++] = nums[j++];
        }
        
        while(i<=mid-1)
            temp[k++] = nums[i++];
        
        while(j<=high)
            temp[k++] = nums[j++];
        
        for(i = low; i<=high; i++)
            nums[i] = temp[i];
        
        return count;
    }
}

QUESTION 20: GAME OF LIFE

class Solution {
   public void gameOfLife(int[][] board) {
    if (board == null || board.length == 0) return;
    int m = board.length, n = board[0].length;

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            int lives = liveNeighbors(board, m, n, i, j);

            // In the beginning, every 2nd bit is 0;
            // So we only need to care about when will the 2nd bit become 1.
            if (board[i][j] == 1 && lives >= 2 && lives <= 3) {  
                board[i][j] = 3; // Make the 2nd bit 1: 01 ---> 11
            }
            if (board[i][j] == 0 && lives == 3) {
                board[i][j] = 2; // Make the 2nd bit 1: 00 ---> 10
            }
        }
    }

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            board[i][j] >>= 1;  // Get the 2nd state.
        }
    }
}

public int liveNeighbors(int[][] board, int m, int n, int i, int j) {
    int lives = 0;
    for (int x = Math.max(i - 1, 0); x <= Math.min(i + 1, m - 1); x++) {
        for (int y = Math.max(j - 1, 0); y <= Math.min(j + 1, n - 1); y++) {
            lives += board[x][y] & 1;
        }
    }
    lives -= board[i][j] & 1;
    return lives;
}
}

QUESTION 21: MAX VALUE OF EQUATION 
class Solution {
    public int findMaxValueOfEquation(int[][] points, int k) {
        PriorityQueue<Pair<Integer, Integer>> maxHeap = new PriorityQueue<>((a, b) -> b.getKey() - a.getKey());
        int max = Integer.MIN_VALUE;
        for(int[] point : points) {
            while(!maxHeap.isEmpty() && point[0] - maxHeap.peek().getValue() > k) {
                maxHeap.poll();
            }
            if(!maxHeap.isEmpty()) {
                max = Math.max(max, point[0] + point[1] + maxHeap.peek().getKey());
            }
            maxHeap.offer(new Pair<Integer, Integer>(point[1] - point[0], point[0]));
        }
        return max;
    }
}


Question 21: Insert Delete GetRandom O(1) - Duplicates allowed

class RandomizedCollection {
Random r;
HashMap<Integer , HashSet<Integer>> map;
ArrayList<Integer> list;

public RandomizedCollection() {
    list= new ArrayList<>();
    map= new HashMap<>();
    r= new Random();
}

public boolean insert(int val) {
    list.add(val);
    if(map.containsKey(val)){
        
        HashSet<Integer>set = map.get(val);
        set.add(list.size()-1);
        
        return false;
    }else{
        HashSet<Integer> set = new HashSet<>();
        set.add(list.size()-1);
        map.put(val , set);
        return true;
    }
}

public boolean remove(int val) {
    if(map.containsKey(val)){
        
        int vidx = map.get(val).iterator().next(); 
        int lidx = list.size()-1;
        int lval = list.get(lidx);
        
        list.set(lidx , val);
        list.set(vidx, lval);
        
        list.remove(lidx);
        map.get(val).remove(vidx);
        
        if(map.get(val).size()==0){
            map.remove(val);
        }
        
        if(map.containsKey(lval)){
            map.get(lval).remove(lidx);
            map.get(lval).add(vidx);
        }
        
        return true;
    }else{
        
        
        return false;
    }
}

public int getRandom() {
    int idx= r.nextInt(list.size());
    return list.get(idx);
}
}


QUESTION 22: Largest Rectangle in Histogram
class Solution {
      public int largestRectangleArea(int[] heights) {
        int len = heights.length;
        Stack<Integer> s = new Stack<>();
        int maxArea = 0;
        for (int i = 0; i <= len; i++){
            int h = (i == len ? 0 : heights[i]);
            if (s.isEmpty() || h >= heights[s.peek()]) {
                s.push(i);
            } else {
                int tp = s.pop();
                maxArea = Math.max(maxArea, heights[tp] * (s.isEmpty() ? i : i - 1 - s.peek()));
                i--;
            }
        }
        return maxArea;
    }
}

ccf
